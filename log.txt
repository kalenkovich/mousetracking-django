conda env create -f local-conda-environment.yml
conda activate mousetracking_conda
python -m venv myvenv
myvenv\Scripts\activate
pip install -r requirements.txt
django-admin.exe startproject negation .
# set time zone in settings.py
# set the folder for static files
# allow pythonanywhere as host
python manage.py migrate
python manage.py runserver

## The experiment app
python manage.py startapp experiment
# After creating `Participant` model:
python manage.py makemigrations experiment
python manage.py migrate experiment
# Make a test subject
python manage.py makemigrations --empty experiment
# Edit 002... migration
python manage.py migrate experiment

## Add admin
python manage.py createsuperuser

## Deploy
# On pythonanywhere.com
# 1. create API token
# Account -> API token -> Create a new API token
# 2. Open a console
# Consoles -> Start a New Console -> Other -> Bash
# 3. Install deployment helper
# pip3.6 install --user pythonanywhere
# 4. Deploy
# pa_autoconfigure_django.py --python=3.7https://github.com/kalenkovich/mousetracking-django.git
# 5. Create admin user
# python manage.py createsuperuser

## Show "Welcome!" at <url>/mt-neg/
# in negation/urls.py route mt-neg/ uris to whatever is inside experiment/urls.py

## Start building the experiment logic
# After clicking "Continue" on the welcome page, the router view will return the trial page
# Trial page and all the corresponding js and cs were developed independently and copied here
# Once done (committed, merged, and pushed to github), update the code on pythonanywere
# Run bash console again
cd kalenkovich.pythonanywhere.com
git pull

## Make experimental lists
# These will be rows in the Trial table bound to a participant
# After creating Trial, Image, and Audio models
python manage.py makemigrations experiment
python manage.py migrate
# Fill the tables with initial values using a data migration
python manage.py makemigrations --empty experiment
# Edit 004... migration
python manage.py migrate experiment

## Save trial results
# After creating TrialResults model:
python manage.py makemigrations experiment
python manage.py migrate experiment
# To avoid saving multiple results for one trial, the Trial field of TrialResults was changed to OneToOneField
# If there are already multiple results for the test trial, delete all of them with TrialResults.objects.all().delete()
# in the Django shell
python manage.py makemigrations experiment
python manage.py migrate experiment

## Add more test trials
# First, we add more objects and sentences. We've also moved them to 'audio' and 'objects' folders, so the data
# migration will have to delete the old ones first.
python manage.py makemigrations --empty experiment
# Edit 0007...
python manage.py migrate experiment
# Now, we can create 6 trials for the test participant
python manage.py makemigrations --empty experiment
# Edit 0008...
python manage.py migrate experiment
# Made Audio and Image names unique
python manage.py makemigrations experiment
python manage.py migrate experiment
# Added a 'sent' flag to Trial
python manage.py makemigrations experiment
python manage.py migrate experiment
# Added 'is_done' flag to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment

## Deploy
# We needed to update the virtual environment, run migrations, collect static files. Not sure if it was a good idea but
# I reran the Django configuration script instead.
# On pythonanywhere, in a console
pa_autoconfigure_django.py --python=3.7 https://github.com/kalenkovich/mousetracking-django.git
# This did not work, so I had to edit migration 0008, delete `db.sqlite3`, and run
django manage.py migrate


## Create new Participant for a new browser session - don't use the test subject anymore
# In settings.py check that:
# 1. 'django.contrib.sessions.middleware.SessionMiddleware' is in the MIDDLEWARE list
# 2. 'django.contrib.sessions' is in the INSTALLED_APPS list
# Set session cookies to expire in 1 day: SESSION_COOKIE_AGE = 60 * 60 * 24
# Add a session field to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment


## Add all the images and all the audio
# Added and committed all images.
# Moved the wav files to the "wav" folder, added the missing ones, ignored this folder - we will not commit these files.
# Converted all the wav files to ogg and saved them to the "ogg" folder.
# To run the conversion, open a new terminal in experiment/static/experiment/audio and run:
conda activate mousetracking
python convert-wav-to-ogg.py
# Committed the ogg files.

## Update the Audio and Image tables
# First, wipe the database
from experiment.models import TrialResults, Trial, Audio, Image, Participant
# Prepare a data migration
python manage.py makemigrations --empty experiment
# Edit 0013 - wipe all tables, populate Audio and Image
# apply migation
python manage.py migrate experiment

## Make sure trial results and trials match
# Add a unique identifier to the Trial model
python manage.py makemigrations experiment
python manage.py migrate experiment

## Use random stimulus lists
# Add `random_seed` field to the `Participant` model
python manage.py makemigrations experiment
python manage.py migrate experiment

## Figure out what to show based on the stage a participant is currently at
# Add `stage` to the `Participant` model
python manage.py makemigrations experiment
# When asked how to populate the `stage` field for the existing entries, provide a one-off default (option 1) -
# "goodbye"
1
'goodbye'
python manage.py migrate experiment

## Separate trials into blocks
# Add the logic to get_next_trial
## Add block number to the page shown between blocks
# Add `next_block_number` and `n_blocks` fields to `Participant`
python manage.py makemigrations experiment
# When asked how to populate the `n_blocks` field for the existing entries, provide a one-off default (option 1) - 9
1
9
python manage.py migrate experiment
# Make `n_blocks` nullable
python manage.py makemigrations experiment
python manage.py migrate experiment

## Add training
# Add `kind` field to the Trial model
python manage.py makemigrations experiment
# When asked how to populate the `kind` field for the existing entries, provide a one-off default (option 1) - 'EXPERIMENT'
1
'EXPERIMENT'
python manage.py migrate experiment

## Add participant form
# Added `age`, `sex`, `gave_consent` to the `Participant` model
# When making a migration, used 'F' as default for `sex` and 18 - for `age`. `gave_consent` has a default (False)
python manage.py makemigrations experiment
# default for `age`
1
18
# default for `sex`
1
'F'
# migrate
python manage.py migrate experiment
# Make `age` nullable
python manage.py makemigrations experiment
python manage.py migrate experiment
# Add "other" as sex
python manage.py makemigrations experiment
python manage.py migrate experiment

## Fix having an extra empty block at the end
# Because we go to next block when we get to the last trial in a block and we understand that we should finish when
# there are no more trials, there is a problem when we get to the last trial of the last block. In that case, we have
# not yet tried and failed to get a new trial, so we preparte for the next extra block, show "block n+1/n is about to
# begin", go to the trial page which then requests a new trial which we don't have so we finish.
# To avoid this, we will be figuring out that the block is finished when the next trial belongs to a new block. In this
# case, we will not return that trial and increment the block counter in the `Participant` model. With this new role,
# it makes no sense to call the counter `next_block_number` so, first, we will rename it to `current_block_number`.
python manage.py makemigrations experiment
# Confirm that a field has been renamed
y
# migrate
python manage.py migrate experiment

# Add feedback
## Save which option is the correct option when creating trials
### Add `correct_response` field to the Trial model
python manage.py makemigrations experiment
# Use 'R' to populate the existing trials
1
'R'
# migrate
python manage.py migrate experiment

# # Use bootstrap to style non-experiment pages
# Add __base.html and __layout_single_column_with_continue.html
# Change all pages to extend __layout_single_column_with_continue.html
# The form page is different because it has its own button
# Installed django-widget-tweaks to allow us to change form filed classes on the template side
pip install -r requirements.txt

# # Add native language information
# Added `native_language` field to the Participant model
# When making a migration, set 'RU' as default
python manage.py makemigrations experiment
# default for `native_language`
1
'RU'
# migrate
python manage.py migrate experiment


# # Ask whether they wore headphones and used mouse
# Added 'headphones_on' and 'pointing_device' fields to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment

# # Add de-anonymization code to the last page
# Added 'de_anonymization_code' field to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment
