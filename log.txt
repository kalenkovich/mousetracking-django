conda env create -f local-conda-environment.yml
conda activate mousetracking_conda
python -m venv myvenv
myvenv\Scripts\activate
pip install -r requirements.txt
django-admin.exe startproject negation .
# set time zone in settings.py
# set the folder for static files
# allow pythonanywhere as host
python manage.py migrate
python manage.py runserver

## The experiment app
python manage.py startapp experiment
# After creating `Participant` model:
python manage.py makemigrations experiment
python manage.py migrate experiment
# Make a test subject
python manage.py makemigrations --empty experiment
# Edit 002... migration
python manage.py migrate experiment

## Add admin
python manage.py createsuperuser

## Deploy
# On pythonanywhere.com
# 1. create API token
# Account -> API token -> Create a new API token
# 2. Open a console
# Consoles -> Start a New Console -> Other -> Bash
# 3. Install deployment helper
# pip3.6 install --user pythonanywhere
# 4. Deploy
# pa_autoconfigure_django.py --python=3.7https://github.com/kalenkovich/mousetracking-django.git
# 5. Create admin user
# python manage.py createsuperuser

## Show "Welcome!" at <url>/mt-neg/
# in negation/urls.py route mt-neg/ uris to whatever is inside experiment/urls.py

## Start building the experiment logic
# After clicking "Continue" on the welcome page, the router view will return the trial page
# Trial page and all the corresponding js and cs were developed independently and copied here
# Once done (committed, merged, and pushed to github), update the code on pythonanywere
# Run bash console again
cd kalenkovich.pythonanywhere.com
git pull

## Make experimental lists
# These will be rows in the Trial table bound to a participant
# After creating Trial, Image, and Audio models
python manage.py makemigrations experiment
python manage.py migrate
# Fill the tables with initial values using a data migration
python manage.py makemigrations --empty experiment
# Edit 004... migration
python manage.py migrate experiment

## Save trial results
# After creating TrialResults model:
python manage.py makemigrations experiment
python manage.py migrate experiment
# To avoid saving multiple results for one trial, the Trial field of TrialResults was changed to OneToOneField
# If there are already multiple results for the test trial, delete all of them with TrialResults.objects.all().delete()
# in the Django shell
python manage.py makemigrations experiment
python manage.py migrate experiment

## Add more test trials
# First, we add more objects and sentences. We've also moved them to 'audio' and 'objects' folders, so the data
# migration will have to delete the old ones first.
python manage.py makemigrations --empty experiment
# Edit 0007...
python manage.py migrate experiment
# Now, we can create 6 trials for the test participant
python manage.py makemigrations --empty experiment
# Edit 0008...
python manage.py migrate experiment
# Made Audio and Image names unique
python manage.py makemigrations experiment
python manage.py migrate experiment
# Added a 'sent' flag to Trial
python manage.py makemigrations experiment
python manage.py migrate experiment
# Added 'is_done' flag to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment

## Deploy
# We needed to update the virtual environment, run migrations, collect static files. Not sure if it was a good idea but
# I reran the Django configuration script instead.
# On pythonanywhere, in a console
pa_autoconfigure_django.py --python=3.7 https://github.com/kalenkovich/mousetracking-django.git
# This did not work, so I had to edit migration 0008, delete `db.sqlite3`, and run
django manage.py migrate


## Create new Participant for a new browser session - don't use the test subject anymore
# In settings.py check that:
# 1. 'django.contrib.sessions.middleware.SessionMiddleware' is in the MIDDLEWARE list
# 2. 'django.contrib.sessions' is in the INSTALLED_APPS list
# Set session cookies to expire in 1 day: SESSION_COOKIE_AGE = 60 * 60 * 24
# Add a session field to Participant
python manage.py makemigrations experiment
python manage.py migrate experiment


## Add all the images and all the audio
# Added and committed all images.
# Moved the wav files to the "wav" folder, added the missing ones, ignored this folder - we will not commit these files.
# Converted all the wav files to ogg and saved them to the "ogg" folder.
# To run the conversion, open a new terminal in experiment/static/experiment/audio and run:
conda activate mousetracking
python convert-wav-to-ogg.py
# Committed the ogg files.

## Update the Audio and Image tables
# First, wipe the database
from experiment.models import TrialResults, Trial, Audio, Image, Participant



# Prepare a data migration
python manage.py makemigrations --empty experiment
# Edit 0013 - wipe all tables, populate Audio and Image
# apply migation
python manage.py migrate experiment